#+hugo_base_dir: ../
#+hugo_front_matter_format: yaml

* Posts
** DONE Using gtags for code navigation :gtags:cscope:vim:neovim:@editor:
CLOSED: [2021-06-27 Sun 15:45]
:PROPERTIES:
:EXPORT_FILE_NAME: gtags-for-code-navigation
:EXPORT_HUGO_WEIGHT: auto
:END:
*** Introduction
GNU Global, also known as ~gtags~ is a source code tagging system that works the same way across diverse environments. It can be used in ~shell~, ~vim~, ~emacs~ and more.

*** Why `gtags`?
- Independent of any editor.
- Has capability to treat definition and reference.
- Substantially faster than ~cscope~ and ~ctags~.

*** Installation
**** Ubuntu
#+begin_src shell
sudo apt install global
#+end_src

**** MacOS
Using [[https://brew.sh][homebrew]].
#+begin_src shell
brew install global
#+end_src

**** Build from source
- Get source code from ~global~ server and extract it.
#+begin_src shell
wget https://ftp.gnu.org/pub/gnu/global/global-6.6.tar.gz
tar -xvzf global-6.6.tar.gz
cd global-6.6
#+end_src

- Compile and Install
#+begin_src shell
./configure
make -j4
sudo make install
#+end_src

*** Using `gtags` in `neovim`
There are lots of ways to use ~gtags~. I prefer to use it in ~neovim~. Same instructions can be used for ~vim~.

We'll be using plugins to set-up auto tag generation for a project. These plugins re-generate DB when files in project are changed.
Thanks to the incremental update support by ~gatgs~ re-generation takes only few seconds.
- My setup for this tutorial:
    - ~neovim~ v0.5 (nightly)
    - Plugin manger - [[https://github.com/wbthomason/packer.nvim][packer.nvim]]

**** Plugin installation
We'll use [[https://github.com/ludovicchabant/vim-gutentags][vim-gutentags]] and [[https://github.com/skywind3000/gutentags_plus][gutentags_plus]].

Add these lines to ~init.lua~ and run ~:PackerSync~
#+begin_src lua
local use = require('packer').use
require('packer').startup(function()
  -- snip --
  use 'ludovicchabant/vim-gutentags' -- Automatic tags management
  use 'skywind3000/gutentags_plus'   -- Cscope support
  -- snip --
end)
#+end_src

**** Few more configurations
Use following settings for better experience.
#+begin_src lua
-- Gutentags
-- generate cscope compatible DB
vim.g.gutentags_modules = {'gtags_cscope'}
-- add folders you want to exclude from index e.g. {'tests', 'doc'}
vim.g.gutentags_ctags_exclude = {}
 -- project root detection other that default ones e.g {'.projectile'}
vim.g.gutentags_project_root = {}
-- store DB in different dir so project doesn't get cluttered
vim.g.gutentags_cache_dir= '~/.gutentags'
-- change focus to quickfix window after search
vim.g.gutentags_plus_switch = 1
-- Debugging
vim.g.gutentags_define_advanced_commands = 1
#+end_src

**** Keymaps
| Keymap       | Description                                      |
|--------------+--------------------------------------------------|
| ~<leader>cs~ | Find symbol (reference) under cursor             |
| ~<leader>cg~ | Find symbol definition under cursor              |
| ~<leader>cd~ | Functions called by this function                |
| ~<leader>cc~ | Functions calling this function                  |
| ~<leader>ct~ | Find text string under cursor                    |
| ~<leader>ce~ | Find egrep pattern under cursor                  |
| ~<leader>cf~ | Find file name under cursor                      |
| ~<leader>ci~ | Find files #including the file name under cursor |
| ~<leader>ca~ | Find places where current symbol is assigned     |
| ~<leader>cz~ | Find current word in ctags database              |

*** Example
Code navigation in ~cURL~ source code.

Pressing ~<leader>cg~ on ~Curl_convert_to_network~ symbol opens a quickfix window with links to defination.
#+CAPTION: cURL source code navigation
#+NAME: fig:gtags-curl
[[../static/images/gtags-curl.png]]

** DONE shell one-liner for infinite loop :shell:sh:bash:zsh:loop:utility:@linux:
CLOSED: [2021-06-30 Wed 13:33]
:PROPERTIES:
:EXPORT_FILE_NAME: shell-infinite-loop
:EXPORT_HUGO_WEIGHT: auto
:END:
This is for a quick reference (copy-pasta).

*** While loop
This is compatible with all POSIX complient shells.
#+begin_src shell
while true; do date; sleep 5; done
#+end_src

*** For loop
If you don't need to support ~sh~
#+begin_src shell
for ((;;)) { date ; sleep 5 ; }
#+end_src

** DONE xargs linux command :xargs:cli:utility:tutorial:@linux:
CLOSED: [2021-06-30 Wed 23:13]
:PROPERTIES:
:EXPORT_FILE_NAME: xargs-linux-command
:EXPORT_HUGO_WEIGHT: auto
:END:
The xargs utility reads space, tab, newline and end-of-file delimited strings from the standard input and executes utility with the strings as arguments.

*** Why xargs?
Some commands like ~grep~ can accept input from ~stdin~, but others can't, this is place where xargs came into picture.

In layman's terms, output of one command can be transfed to another command as a arguments. Piping outputs to some programs work (like ~grep~, ~awk~, ~sort~, ~uniq~, etc) but, it doesn't work always (e.g. ~kill~, ~mkdir~, ~touch~, etc).

*** Examples
Examples are always a best way to learn about CLI programs. Let's dive into it.

**** Simple use case
Make folder using output from other command. If nothing is given it'll pass input to ~echo~.
#+begin_src shell
$ echo "my-direcory" | xargs mkdir
#+end_src

**** -t switch
- ~-t~ switch will show what ~xargs~ is doing.
#+begin_src shell
$ echo "my-directory-1 my-directory-2" | xargs -t mkdir
mkdir my-directory-1 my-directory-2
#+end_src

- Pass outputs one by one.
#+begin_src shell
$ echo "my-directory-1 my-directory-2" | xargs -t -n 1 mkdir
mkdir my-directory-1
mkdir my-directory-2
#+end_src

**** -0 switch
If input items are terminated by null character instead of white spaces.
#+begin_src shell
$ echo "file1\0file2\0" | xargs -0 touch
#+end_src

**** Manupulate input before passing to program
~-I~ can be used to do this.
Let's say you want to bulk rename all files in a folder.
#+begin_src shell
$ ls | xargs -I @@ mv @@ @@.sh
#+end_src

~@@~ used in above example is just a variable, you can use any other symbols.

**** Wait before executing next command
~-P~ allows to do this. You can specify number of parellel executions.

Below command executes ~echo~ on each ~1,2,3,4~ one by one with 1 sec sleep in between.
Number after ~-P~ is used to specify number of parallel executions.
#+begin_src shell
$ echo "1 2 3 4" | xargs -n 1 -P 1 bash -c 'sleep 1; echo $0'
#+end_src

Let's say, you want to execute 2 commands simultaneity and wait 1 sec before next 2.
#+begin_src shell
$ echo "1 2 3 4" | xargs -n 1 -P 2 bash -c 'sleep 1; echo $0'
#+end_src

** TODO `neovim` config in `lua` :neovim:lua:init_lua:@editor:
:PROPERTIES:
:EXPORT_FILE_NAME: neovim-lua-config
:EXPORT_HUGO_WEIGHT: auto
:END:
** TODO awk
